{"version":3,"sources":["redux/product/productSelectors.js","redux/product/productOperations.js","services/api.js","redux/product/index.js","components/DessertsList/DessertsList.module.css","components/DessertsList/DessertListItem.js","components/DessertsList/DessertsList.js"],"names":["getLoading","state","products","loading","getError","errorReducer","getProducts","items","getFileLink","fileLink","getIngredients","ingredients","createNewIngredient","newIngredient","addIngredient","ingredient","fetchProducts","dispatch","productActions","productsRequest","getAllProducts","then","data","productsSuccess","catch","error","productsError","fetchProductsByCategory","category","byCategoryRequest","getProductsByCategory","byCategorySuccess","byCategoryError","fetchProductById","id","byIdRequest","getProductById","byIdSuccess","product","byIdError","sendFile","file","sendFileRequest","postImage","sendFileSuccess","image","sendFileError","sendProduct","sendProductRequest","postNewProduct","sendProductSuccess","clearFile","sendProductError","getAllIngredientsRequest","getAllIngredients","getAllIngredientsSuccess","getAllIngredientsError","updateProduct","productId","newProduct","updateProductRequest","updateProductById","updateProductSuccess","updateProductError","deleteProduct","deleteProductRequest","deleteProductById","deleteProductSuccess","deleteProductError","createNewIngredientsRequest","createNewIngredients","createNewIngredientsSuccess","createNewIngredientsError","source","axios","CancelToken","baseURL","get","cancelToken","token","a","post","put","delete","FormData","append","fetchDevs","fetchAllStocks","sendUserFile","sendNewStock","stock","updateExistingStock","stockId","newStock","deleteExistingStock","getExistingStockById","module","exports","dessertItem","styles","dessertTittle","dessertWeight","dessertOrder","dessertDescription","dessertPriceContainer","dessertPrice","dessertCurrency","dessertButton","dessertImg","DessertListItem","props","name","description","price","images","local","useSelector","lang","useDispatch","successMessage","values","errorMessage","useState","isAddedProdToOrder","setIsAddedProdToOrder","message","setMessage","addProd","setTimeout","orderOperations","addProdToOrderList","useEffect","className","Notification","confirm","forCard","src","alt","width","type","onClick","dessertConainer","dessertsHeading","dessertList","DesertList","this","onFetchProductDesserts","err","console","log","cancel","isLoading","Spinner","filter","categories","map","key","_id","Component","mapDispatchToProps","productOperations","connect","productSelectors"],"mappings":"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","file":"static/js/18.b1754d81.chunk.js","sourcesContent":["const getLoading = (state) => state.products.loading;\n\nconst getError = (state) => state.products.errorReducer;\n\nconst getProducts = (state) => state.products.items;\n\nconst getFileLink = (state) => state.products.fileLink;\n\nconst getIngredients = (state) => state.products.ingredients;\n\nconst createNewIngredient = (state) => state.products.newIngredient;\n\nconst addIngredient = (state) => state.products.ingredient;\n\nexport default {\n  getLoading,\n  getError,\n  getProducts,\n  getFileLink,\n  getIngredients,\n  createNewIngredient,\n  addIngredient,\n};\n","import productActions from \"./productActions\";\nimport {\n  getAllIngredients,\n  postNewProduct,\n  postImage,\n  getAllProducts,\n  getProductsByCategory,\n  getProductById,\n  updateProductById,\n  deleteProductById,\n  createNewIngredients,\n} from \"../../services/api\";\n\nconst fetchProducts = () => (dispatch) => {\n  dispatch(productActions.productsRequest());\n\n  getAllProducts()\n    .then(({ data }) => dispatch(productActions.productsSuccess(data.products)))\n    .catch((error) => dispatch(productActions.productsError(error)));\n};\n\nconst fetchProductsByCategory = (category) => (dispatch) => {\n  dispatch(productActions.byCategoryRequest());\n\n  getProductsByCategory(category)\n    .then(({ data }) =>\n      dispatch(productActions.byCategorySuccess(data.products))\n    )\n    .catch((error) => dispatch(productActions.byCategoryError(error)));\n};\n\nconst fetchProductById = (id) => (dispatch) => {\n  dispatch(productActions.byIdRequest());\n\n  getProductById(id)\n    .then(({ data }) => dispatch(productActions.byIdSuccess(data.product)))\n    .catch((error) => dispatch(productActions.byIdError(error)));\n};\n\n//for AdminPage\nconst sendFile = (file) => (dispatch) => {\n  dispatch(productActions.sendFileRequest());\n\n  postImage(file)\n    .then(({ data }) =>\n      dispatch(productActions.sendFileSuccess(data.image.file))\n    )\n    .catch((error) => dispatch(productActions.sendFileError(error)));\n};\n\nconst sendProduct = (product) => (dispatch) => {\n  dispatch(productActions.sendProductRequest());\n\n  postNewProduct(product)\n    .then(({ data }) => {\n      dispatch(productActions.sendProductSuccess(data.product));\n      dispatch(productActions.clearFile());\n    })\n    //проверить что приходит в data\n    .catch((error) => dispatch(productActions.sendProductError(error)));\n};\n\nconst getIngredients = () => (dispatch) => {\n  dispatch(productActions.getAllIngredientsRequest());\n\n  getAllIngredients()\n    .then(({ data }) =>\n      dispatch(productActions.getAllIngredientsSuccess(data.ingredients))\n    )\n    .catch((error) => dispatch(productActions.getAllIngredientsError(error)));\n};\nconst createNewIngredient = (ingredient) => (dispatch) => {\n  dispatch(productActions.createNewIngredientsRequest());\n\n  createNewIngredients(ingredient)\n    .then(() => dispatch(productActions.createNewIngredientsSuccess()))\n    .catch((error) =>\n      dispatch(productActions.createNewIngredientsError(error))\n    );\n};\n\nconst updateProduct = (productId, newProduct) => (dispatch) => {\n  dispatch(productActions.updateProductRequest());\n\n  updateProductById(productId, newProduct)\n    .then(({ data }) => dispatch(productActions.updateProductSuccess(data)))\n    .catch((error) => dispatch(productActions.updateProductError(error)));\n};\n\nconst deleteProduct = (productId) => (dispatch) => {\n  dispatch(productActions.deleteProductRequest());\n\n  deleteProductById(productId)\n    .then(\n      ({ data }) => dispatch(productActions.deleteProductSuccess(data))\n      //проверить что приходит в data\n    )\n    .catch((error) => dispatch(productActions.deleteProductError(error)));\n};\n\nexport default {\n  fetchProducts,\n  fetchProductsByCategory,\n  fetchProductById,\n\n  sendFile,\n  sendProduct,\n  getIngredients,\n  updateProduct,\n  deleteProduct,\n  createNewIngredient,\n};\n","import axios from \"axios\";\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\nconst baseURL = \"https://evening-caverns-34846.herokuapp.com\";\n\n//for Products\nconst getAllProducts = () => {\n  return axios.get(\"/products\");\n};\n\nconst getProductsByCategory = (category) => {\n  return axios.get(`/products/?category=\"${category}\"`, {\n    cancelToken: source.token,\n  });\n};\n\nconst getProductById = (id) => {\n  return axios.get(`/products/${id}`);\n};\n\nconst getAllIngredients = async () => {\n  return axios.get(`${baseURL}/ingredients`);\n};\nconst createNewIngredients = async (ingredients) => {\n  return axios.post(`${baseURL}/ingredients`, ingredients);\n};\n\nconst postNewProduct = (product) => {\n  return axios.post(`${baseURL}/products`, product);\n};\n\nconst updateProductById = (productId, newProduct) => {\n  return axios.put(`/products/${productId}`, newProduct);\n};\n\nconst deleteProductById = (productId) => {\n  return axios.delete(`/products/${productId}`);\n};\n\n//for Orders\n\n// other\nconst postImage = async (file) => {\n  const data = new FormData();\n  data.append(\"file\", file);\n\n  return axios.post(`${baseURL}/images`, data);\n};\n\n// developers\n\nconst fetchDevs = () => axios.get(\"/developers\");\n\n// Stocks\n\nconst fetchAllStocks = () => axios.get(\"/promo\");\n\nconst sendUserFile = (file) => axios.post(\"/images\", file);\n\nconst sendNewStock = (stock) => axios.post(\"/promo\", stock);\n\nconst updateExistingStock = (stockId, newStock) =>\n  axios.put(`/promo/${stockId}`, newStock);\n\nconst deleteExistingStock = (stockId) => axios.delete(`/promo/${stockId}`);\n\nconst getExistingStockById = (stockId) => axios.get(`/promo/${stockId}`);\n\nexport {\n  fetchDevs,\n  getAllIngredients,\n  createNewIngredients,\n  postNewProduct,\n  postImage,\n  getAllProducts,\n  getProductsByCategory,\n  getProductById,\n  updateProductById,\n  deleteProductById,\n  fetchAllStocks,\n  sendUserFile,\n  sendNewStock,\n  updateExistingStock,\n  deleteExistingStock,\n  getExistingStockById,\n};\n","export { default as productActions } from \"./productActions\";\nexport { default as productOperations } from \"./productOperations\";\nexport { default as productSelectors } from \"./productSelectors\";\nexport { default as productReducer } from \"./productReducer\";\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dessertConainer\":\"DessertsList_dessertConainer__2Gixi\",\"dessertsHeading\":\"DessertsList_dessertsHeading__3ck0r\",\"dessertList\":\"DessertsList_dessertList__3V4Sp\",\"dessertItem\":\"DessertsList_dessertItem__ylOXe\",\"dessertImg\":\"DessertsList_dessertImg__3D4ZY\",\"dessertDescription\":\"DessertsList_dessertDescription__2CZ3F\",\"dessertTittle\":\"DessertsList_dessertTittle__1HHfu\",\"dessertWeight\":\"DessertsList_dessertWeight__uZYDw\",\"dessertOrder\":\"DessertsList_dessertOrder__64Loz\",\"dessertPriceContainer\":\"DessertsList_dessertPriceContainer__1KfTx\",\"dessertPrice\":\"DessertsList_dessertPrice__2Jlfc\",\"dessertCurrency\":\"DessertsList_dessertCurrency__1wlYS\",\"dessertButton\":\"DessertsList_dessertButton__1LoCs\"};","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { orderOperations } from \"../../redux/order\";\nimport { FormattedMessage } from \"react-intl\";\nimport Notification from \"../Notification\";\n\n// import cheesecacke from '../../assets/img/desserts/cheesecacke.jpg';\nimport styles from \"./DessertsList.module.css\";\n\nconst {\n  dessertItem,\n  dessertTittle,\n  dessertWeight,\n  dessertOrder,\n  dessertDescription,\n  dessertPriceContainer,\n  dessertPrice,\n  dessertCurrency,\n  dessertButton,\n  dessertImg,\n} = styles;\n\nconst DessertListItem = (props) => {\n  const { name, description, price, images } = props;\n\n  const local = useSelector((state) => state.local.lang);\n\n  // const product = useSelector(state => state.products.items);\n  const dispatch = useDispatch();\n  const onAddProductToOrder = () =>\n    dispatch(orderOperations.addProdToOrderList(props));\n\n  const successMessage = (\n    <FormattedMessage\n      id=\"order.success\"\n      values={{\n        name: name[local],\n      }}\n    />\n  );\n\n  const errorMessage = (\n    <FormattedMessage\n      id=\"order.error\"\n      values={{\n        name: name[local],\n      }}\n    />\n  );\n\n  const [isAddedProdToOrder, setIsAddedProdToOrder] = useState(false);\n  const [message, setMessage] = useState(successMessage);\n\n  const addProd = async () => {\n    if (isAddedProdToOrder) {\n      setIsAddedProdToOrder(false);\n      setMessage(errorMessage);\n      return await setTimeout(() => setIsAddedProdToOrder(true), 10);\n    }\n    onAddProductToOrder(props);\n    setIsAddedProdToOrder(true);\n  };\n\n  useEffect(() => {\n    setMessage(\n      <FormattedMessage\n        id=\"order.success\"\n        values={{\n          name: name[local],\n        }}\n      />\n    );\n  }, [local, name]);\n\n  return (\n    <li className={dessertItem}>\n      {isAddedProdToOrder && <Notification message={message} confirm forCard />}\n      <img src={images} alt=\"\" width=\"280\" className={dessertImg} />\n      <div className={dessertDescription}>\n        <h2 className={dessertTittle}>{name[local]}</h2>\n        <span className={dessertWeight}>\n          <FormattedMessage id=\"weight\" />\n          {description}\n          <FormattedMessage id=\"g\" />\n        </span>\n        <div className={dessertOrder}>\n          <div className={dessertPriceContainer}>\n            <span className={dessertPrice}>{`${price.price}.00 `}</span>\n            <span className={dessertCurrency}>\n              <FormattedMessage id=\"grn\" />\n            </span>\n          </div>\n\n          <button className={dessertButton} type=\"submit\" onClick={addProd}>\n            <FormattedMessage id=\"orders.chart\" />\n          </button>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default DessertListItem;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport Spinner from \"../Spinner\";\nimport axios from \"axios\";\n\nimport { productSelectors, productOperations } from \"../../redux/product\";\n\nimport DessertsListItem from \"./DessertListItem\";\nimport styles from \"./DessertsList.module.css\";\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\nconst { dessertConainer, dessertsHeading, dessertList } = styles;\n\nclass DesertList extends Component {\n  async componentDidMount() {\n    try {\n      this.props.onFetchProductDesserts(\"desserts\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async componentWillUnmount() {\n    try {\n      source.cancel(\"Operation canceled\");\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const { products, isLoading } = this.props;\n\n    return (\n      <div className={dessertConainer}>\n        {isLoading && <Spinner />}\n        <h2 className={dessertsHeading}>\n          <FormattedMessage id=\"desserts\" />\n        </h2>\n        <ul className={dessertList}>\n          {products\n            .filter(({ categories }) => categories === \"desserts\")\n            .map((product) => (\n              <DessertsListItem key={product._id} {...product} />\n            ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    products: productSelectors.getProducts(state),\n    isLoading: productSelectors.getLoading(state),\n  };\n};\n\nconst mapDispatchToProps = {\n  onFetchProductDesserts: productOperations.fetchProductsByCategory,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DesertList);\n"],"sourceRoot":""}